package com.moodspaces.model;

import java.util.List;
import com.moodspaces.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MOOD_ENTRY.
 */
public class MoodEntry {

    private Long id;
    /** Not-null value. */
    private java.util.Date date;
    private Long taskId;
    private Long spotId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MoodEntryDao myDao;

    private MoodTask moodTask;
    private Long moodTask__resolvedKey;

    private MoodSpot moodSpot;
    private Long moodSpot__resolvedKey;

    private List<MoodSelection> selections;

    public MoodEntry() {
    }

    public MoodEntry(Long id) {
        this.id = id;
    }

    public MoodEntry(Long id, java.util.Date date, Long taskId, Long spotId) {
        this.id = id;
        this.date = date;
        this.taskId = taskId;
        this.spotId = spotId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMoodEntryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public java.util.Date getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Long getTaskId() {
        return taskId;
    }

    public void setTaskId(Long taskId) {
        this.taskId = taskId;
    }

    public Long getSpotId() {
        return spotId;
    }

    public void setSpotId(Long spotId) {
        this.spotId = spotId;
    }

    /** To-one relationship, resolved on first access. */
    public MoodTask getMoodTask() {
        if (moodTask__resolvedKey == null || !moodTask__resolvedKey.equals(taskId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoodTaskDao targetDao = daoSession.getMoodTaskDao();
            moodTask = targetDao.load(taskId);
            moodTask__resolvedKey = taskId;
        }
        return moodTask;
    }

    public void setMoodTask(MoodTask moodTask) {
        this.moodTask = moodTask;
        taskId = moodTask == null ? null : moodTask.getId();
        moodTask__resolvedKey = taskId;
    }

    /** To-one relationship, resolved on first access. */
    public MoodSpot getMoodSpot() {
        if (moodSpot__resolvedKey == null || !moodSpot__resolvedKey.equals(spotId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoodSpotDao targetDao = daoSession.getMoodSpotDao();
            moodSpot = targetDao.load(spotId);
            moodSpot__resolvedKey = spotId;
        }
        return moodSpot;
    }

    public void setMoodSpot(MoodSpot moodSpot) {
        this.moodSpot = moodSpot;
        spotId = moodSpot == null ? null : moodSpot.getId();
        moodSpot__resolvedKey = spotId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<MoodSelection> getSelections() {
        if (selections == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoodSelectionDao targetDao = daoSession.getMoodSelectionDao();
            selections = targetDao._queryMoodEntry_Selections(id);
        }
        return selections;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSelections() {
        selections = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
