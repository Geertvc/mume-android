package com.moodspaces.model;

import com.moodspaces.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MOOD_ENTRY_PERSON_MAP.
 */
public class MoodEntryPersonMap {

    private Long id;
    private Long entryId;
    private Long personId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MoodEntryPersonMapDao myDao;

    private MoodEntry moodEntry;
    private Long moodEntry__resolvedKey;

    private MoodPerson moodPerson;
    private Long moodPerson__resolvedKey;


    public MoodEntryPersonMap() {
    }

    public MoodEntryPersonMap(Long id) {
        this.id = id;
    }

    public MoodEntryPersonMap(Long id, Long entryId, Long personId) {
        this.id = id;
        this.entryId = entryId;
        this.personId = personId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMoodEntryPersonMapDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getEntryId() {
        return entryId;
    }

    public void setEntryId(Long entryId) {
        this.entryId = entryId;
    }

    public Long getPersonId() {
        return personId;
    }

    public void setPersonId(Long personId) {
        this.personId = personId;
    }

    /** To-one relationship, resolved on first access. */
    public MoodEntry getMoodEntry() {
        if (moodEntry__resolvedKey == null || !moodEntry__resolvedKey.equals(entryId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoodEntryDao targetDao = daoSession.getMoodEntryDao();
            moodEntry = targetDao.load(entryId);
            moodEntry__resolvedKey = entryId;
        }
        return moodEntry;
    }

    public void setMoodEntry(MoodEntry moodEntry) {
        this.moodEntry = moodEntry;
        entryId = moodEntry == null ? null : moodEntry.getId();
        moodEntry__resolvedKey = entryId;
    }

    /** To-one relationship, resolved on first access. */
    public MoodPerson getMoodPerson() {
        if (moodPerson__resolvedKey == null || !moodPerson__resolvedKey.equals(personId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoodPersonDao targetDao = daoSession.getMoodPersonDao();
            moodPerson = targetDao.load(personId);
            moodPerson__resolvedKey = personId;
        }
        return moodPerson;
    }

    public void setMoodPerson(MoodPerson moodPerson) {
        this.moodPerson = moodPerson;
        personId = moodPerson == null ? null : moodPerson.getId();
        moodPerson__resolvedKey = personId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
