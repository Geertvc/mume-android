package com.moodspaces.model;

import com.moodspaces.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MOOD_SELECTION.
 */
public class MoodSelection {

    private Long id;
    private double r;
    private double theta;
    private Long entry;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MoodSelectionDao myDao;

    private MoodEntry moodEntry;
    private Long moodEntry__resolvedKey;


    public MoodSelection() {
    }

    public MoodSelection(Long id) {
        this.id = id;
    }

    public MoodSelection(Long id, double r, double theta, Long entry) {
        this.id = id;
        this.r = r;
        this.theta = theta;
        this.entry = entry;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMoodSelectionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public double getR() {
        return r;
    }

    public void setR(double r) {
        this.r = r;
    }

    public double getTheta() {
        return theta;
    }

    public void setTheta(double theta) {
        this.theta = theta;
    }

    public Long getEntry() {
        return entry;
    }

    public void setEntry(Long entry) {
        this.entry = entry;
    }

    /** To-one relationship, resolved on first access. */
    public MoodEntry getMoodEntry() {
        if (moodEntry__resolvedKey == null || !moodEntry__resolvedKey.equals(entry)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoodEntryDao targetDao = daoSession.getMoodEntryDao();
            moodEntry = targetDao.load(entry);
            moodEntry__resolvedKey = entry;
        }
        return moodEntry;
    }

    public void setMoodEntry(MoodEntry moodEntry) {
        this.moodEntry = moodEntry;
        entry = moodEntry == null ? null : moodEntry.getId();
        moodEntry__resolvedKey = entry;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
